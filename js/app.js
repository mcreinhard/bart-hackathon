// Generated by CoffeeScript 1.7.1
var area, renderTrain, renderTrains, routeNum, svg, t, _i, _j, _k, _len, _ref, _ref1;

svg = d3.select('svg').attr({
  width: window.innerWidth - 30,
  height: window.innerHeight - 30
});

_ref = ['sf', 'richmond', 'pbp', 'dp', 'fremont'];
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  area = _ref[_i];
  svg.selectAll("line.station." + area).data(stations[area], function(d) {
    return d.station;
  }).enter().append('line').attr({
    x1: function(d) {
      return add(maps[area].position(d.time), scale(d.width[0], rotate90(maps[area].tangent(d.time)))).x;
    },
    y1: function(d) {
      return add(maps[area].position(d.time), scale(d.width[0], rotate90(maps[area].tangent(d.time)))).y;
    },
    x2: function(d) {
      return add(maps[area].position(d.time), scale(d.width[1], rotate90(maps[area].tangent(d.time)))).x;
    },
    y2: function(d) {
      return add(maps[area].position(d.time), scale(d.width[1], rotate90(maps[area].tangent(d.time)))).y;
    }
  }).classed({
    station: true
  }).classed("" + area, true);
  svg.selectAll("text.station." + area).data(stations[area], function(d) {
    return d.station;
  }).enter().append('text').attr({
    x: function(d) {
      return maps[area].position(d.time).x;
    },
    y: function(d) {
      return maps[area].position(d.time).y;
    },
    transform: function(d) {
      return "rotate(-25 " + (maps[area].position(d.time).x) + " " + (maps[area].position(d.time).y) + ")";
    }
  }).text(function(d) {
    return stationNames[d.station.toLowerCase()];
  }).classed({
    station: true
  }).classed("" + area, true);
}

for (routeNum = _j = 1; _j <= 12; routeNum = ++_j) {
  if (((_ref1 = maps[routeNum]) != null ? _ref1.position : void 0) != null) {
    for (t = _k = 0; _k <= 100; t = ++_k) {
      if (maps[routeNum].position(t) != null) {
        svg.append('circle').attr({
          cx: maps[routeNum].position(t).x,
          cy: maps[routeNum].position(t).y,
          r: 0.1
        }).style({
          fill: 'none'
        });
        svg.append('line').attr({
          x1: maps[routeNum].position(t).x,
          y1: maps[routeNum].position(t).y,
          x2: (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).x,
          y2: (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).y
        }).style({
          stroke: 'none',
          'stroke-width': 0.06
        });
      }
    }
  }
}

renderTrain = function(train) {
  var length, trainLine, _ref2, _ref3, _ref4, _ref5;
  t = train.position;
  routeNum = train.route;
  length = train.length;
  trainLine = svg.append('line').classed({
    train: true
  });
  if (maps[routeNum].position(t) != null) {
    return trainLine.attr({
      x1: ((_ref2 = add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))) != null ? _ref2.x : void 0) || 0,
      y1: ((_ref3 = add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))) != null ? _ref3.y : void 0) || 0,
      x2: ((_ref4 = add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))) != null ? _ref4.x : void 0) || 0,
      y2: ((_ref5 = add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))) != null ? _ref5.y : void 0) || 0
    });
  }
};

renderTrains = function() {
  return svg.selectAll('line.train').data(trains).enter().append('line').classed({
    train: true
  }).attr({
    x1: function(d) {
      var length;
      t = d.position;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).x;
      } else {
        return 0;
      }
    },
    y1: function(d) {
      var length;
      t = d.position;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).y;
      } else {
        return 0;
      }
    },
    x2: function(d) {
      var length;
      t = d.position;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))).x;
      } else {
        return 0;
      }
    },
    y2: function(d) {
      var length;
      t = d.position;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))).y;
      } else {
        return 0;
      }
    }
  }).transition().tween('bart', function() {
    return function(s) {
      return d3.select(this).attr({
        x1: function(d) {
          var length;
          t = d.position + s * 10;
          routeNum = d.route;
          length = d.length;
          if (maps[routeNum].position(t) != null) {
            return (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).x;
          } else {
            return 0;
          }
        },
        y1: function(d) {
          var length;
          t = d.position + s * 10;
          routeNum = d.route;
          length = d.length;
          if (maps[routeNum].position(t) != null) {
            return (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).y;
          } else {
            return 0;
          }
        },
        x2: function(d) {
          var length;
          t = d.position + s * 10;
          routeNum = d.route;
          length = d.length;
          if (maps[routeNum].position(t) != null) {
            return (add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))).x;
          } else {
            return 0;
          }
        },
        y2: function(d) {
          var length;
          t = d.position + s * 10;
          routeNum = d.route;
          length = d.length;
          if (maps[routeNum].position(t) != null) {
            return (add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))).y;
          } else {
            return 0;
          }
        }
      });
    };
  }).duration(60000).ease('linear').attr({
    x1: function(d) {
      var length;
      t = d.position + 10;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).x;
      } else {
        return 0;
      }
    },
    y1: function(d) {
      var length;
      t = d.position + 10;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(0.3, maps[routeNum].tangent(t)))).y;
      } else {
        return 0;
      }
    },
    x2: function(d) {
      var length;
      t = d.position + 10;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))).x;
      } else {
        return 0;
      }
    },
    y2: function(d) {
      var length;
      t = d.position + 10;
      routeNum = d.route;
      length = d.length;
      if (maps[routeNum].position(t) != null) {
        return (add(maps[routeNum].position(t), scale(-0.3, maps[routeNum].tangent(t)))).y;
      } else {
        return 0;
      }
    }
  });
};

//# sourceMappingURL=app.map
