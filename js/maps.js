// Generated by CoffeeScript 1.7.1
var add, cos, dpOutlineMap, dpOutlineTangentMap, fremontOutlineMap, fremontOutlineTangentMap, mapAndOffset, maps, pbpOutlineMap, pbpOutlineTangentMap, pi, richmondOutlineMap, richmondOutlineTangentMap, rotate90, route11Map, route11TangentMap, route12Map, route12TangentMap, route1Map, route1TangentMap, route2Map, route2TangentMap, route3Map, route3TangentMap, route4Map, route4TangentMap, route5Map, route5TangentMap, route6Map, route6TangentMap, route7Map, route7TangentMap, route8Map, route8TangentMap, scale, scheduledToAverage, sfOutlineMap, sfOutlineTangentMap, sin, subtract;

pi = Math.PI;

sin = Math.sin, cos = Math.cos;

sfOutlineMap = function(t) {
  var theta;
  if ((0 <= t && t <= 5)) {
    return {
      x: 0,
      y: 37.5 - t
    };
  }
  if ((5 < t && t < 20)) {
    theta = (pi / 30) * (t - 5) + pi;
    return {
      x: 10 * cos(theta) + 10,
      y: 10 * sin(theta) + 32.5
    };
  }
  if ((20 <= t && t <= 41)) {
    return {
      x: t - 10,
      y: 22.5
    };
  }
};

sfOutlineTangentMap = function(t) {
  var theta;
  if ((0 <= t && t <= 5)) {
    return {
      x: 0,
      y: -1
    };
  }
  if ((5 < t && t < 20)) {
    theta = (pi / 30) * (t - 5) + pi;
    return {
      x: -sin(theta),
      y: cos(theta)
    };
  }
  if ((20 <= t && t <= 41)) {
    return {
      x: 1,
      y: 0
    };
  }
};

richmondOutlineMap = function(t) {
  var theta;
  if ((0 <= t && t <= 1)) {
    return {
      x: 38.5 - t,
      y: 0
    };
  }
  if ((1 < t && t < 9.5)) {
    theta = (-pi / 17) * (t - 1) + (3 / 2) * pi;
    return {
      x: 5 * cos(theta) + 37.5,
      y: 5 * sin(theta) + 5
    };
  }
  if ((9.5 <= t && t <= 25.5)) {
    return {
      x: 32.5,
      y: t - 4.5
    };
  }
};

richmondOutlineTangentMap = function(t) {
  var theta;
  if ((0 <= t && t <= 1)) {
    return {
      x: -1,
      y: 0
    };
  }
  if ((1 < t && t < 9.5)) {
    theta = (-pi / 17) * (t - 1) + (3 / 2) * pi;
    return {
      x: sin(theta),
      y: -cos(theta)
    };
  }
  if ((9.5 <= t && t <= 25.5)) {
    return {
      x: 0,
      y: 1
    };
  }
};

fremontOutlineMap = function(t) {
  var theta;
  if ((0 <= t && t <= 18.5)) {
    return {
      x: 56 - t,
      y: 38
    };
  }
  if ((18.5 < t && t < 26)) {
    theta = (pi / 15) * (t - 18.5) + pi / 2;
    return {
      x: 5 * cos(theta) + 37.5,
      y: 5 * sin(theta) + 33
    };
  }
  if ((26 <= t && t <= 35)) {
    return {
      x: 32.5,
      y: 59 - t
    };
  }
};

fremontOutlineTangentMap = function(t) {
  var theta;
  if ((0 <= t && t <= 18.5)) {
    return {
      x: -1,
      y: 0
    };
  }
  if ((18.5 < t && t < 26)) {
    theta = (pi / 15) * (t - 18.5) + pi / 2;
    return {
      x: -sin(theta),
      y: cos(theta)
    };
  }
  if ((26 <= t && t <= 35)) {
    return {
      x: 0,
      y: -1
    };
  }
};

pbpOutlineMap = function(t) {
  var theta;
  if ((0 <= t && t <= 5)) {
    return {
      x: 59,
      y: t
    };
  }
  if ((5 < t && t < 12.5)) {
    theta = (pi / 15) * (t - 5);
    return {
      x: 5 * cos(theta) + 54,
      y: 5 * sin(theta) + 5
    };
  }
  if ((12.5 <= t && t <= 27.5)) {
    return {
      x: 66.5 - t,
      y: 10
    };
  }
  if ((27.5 < t && t <= 36)) {
    theta = (-pi / 15) * (t - 27.5) + (3 / 2) * pi;
    return {
      x: 5 * cos(theta) + 39,
      y: 5 * sin(theta) + 15
    };
  }
};

pbpOutlineTangentMap = function(t) {
  var theta;
  if ((0 <= t && t <= 5)) {
    return {
      x: 0,
      y: 1
    };
  }
  if ((5 < t && t < 12.5)) {
    theta = (pi / 15) * (t - 5);
    return {
      x: -sin(theta),
      y: cos(theta)
    };
  }
  if ((12.5 <= t && t <= 27.5)) {
    return {
      x: -1,
      y: 0
    };
  }
  if ((27.5 < t && t <= 36)) {
    theta = (-pi / 15) * (t - 27.5) + (3 / 2) * pi;
    return {
      x: sin(theta),
      y: -cos(theta)
    };
  }
};

dpOutlineMap = function(t) {
  var theta;
  if ((0 <= t && t <= 3)) {
    return {
      x: 50.5 - t,
      y: 28
    };
  }
  if ((3 < t && t <= 10.5)) {
    theta = (-pi / 15) * (t - 3) + (3 / 2) * pi;
    return {
      x: 5 * cos(theta) + 47.5,
      y: 5 * sin(theta) + 33
    };
  }
  if ((10.5 < t && t < 16)) {
    theta = (pi / 11) * (t - 10.5);
    return {
      x: 3.5 * cos(theta) + 39,
      y: 3.5 * sin(theta) + 33
    };
  }
  if ((16 <= t && t <= 18)) {
    return {
      x: 55 - t,
      y: 36.5
    };
  }
};

dpOutlineTangentMap = function(t) {
  var theta;
  if ((0 <= t && t <= 3)) {
    return {
      x: -1,
      y: 0
    };
  }
  if ((3 < t && t <= 10.5)) {
    theta = (-pi / 15) * (t - 3) + (3 / 2) * pi;
    return {
      x: sin(theta),
      y: -cos(theta)
    };
  }
  if ((10.5 < t && t < 16)) {
    theta = (pi / 11) * (t - 10.5);
    return {
      x: -sin(theta),
      y: cos(theta)
    };
  }
  if ((16 <= t && t <= 18)) {
    return {
      x: -1,
      y: 0
    };
  }
};

maps = {
  sf: {
    position: sfOutlineMap,
    tangent: sfOutlineTangentMap
  },
  richmond: {
    position: richmondOutlineMap,
    tangent: richmondOutlineTangentMap
  },
  pbp: {
    position: pbpOutlineMap,
    tangent: pbpOutlineTangentMap
  },
  dp: {
    position: dpOutlineMap,
    tangent: dpOutlineTangentMap
  },
  fremont: {
    position: fremontOutlineMap,
    tangent: fremontOutlineTangentMap
  }
};

route1Map = function(t) {};

route1TangentMap = function(t) {};

route2Map = function(t) {};

route2TangentMap = function(t) {};

route3Map = function(t) {};

route3TangentMap = function(t) {};

route4Map = function(t) {};

route4TangentMap = function(t) {};

route5Map = function(t) {};

route5TangentMap = function(t) {};

route6Map = function(t) {};

route6TangentMap = function(t) {};

route8Map = function(t) {
  var s;
  if ((0 <= t && t <= 39)) {
    s = scheduledToAverage(t, 8);
    return mapAndOffset(s, 'sf', 1.5);
  }
  if ((39 < t && t < 42)) {
    return;
  }
  if ((42 <= t && t <= 66)) {
    s = scheduledToAverage(66, 8) - scheduledToAverage(t, 8);
    return mapAndOffset(s, 'richmond', -0.5);
  }
};

route8TangentMap = function(t) {
  var s;
  if ((0 <= t && t <= 39)) {
    s = scheduledToAverage(t, 8);
    return maps.sf.tangent(s);
  }
  if ((39 < t && t < 42)) {
    return;
  }
  if ((42 <= t && t <= 66)) {
    s = scheduledToAverage(66, 8) - scheduledToAverage(t, 8);
    return scale(-1, maps.richmond.tangent(s));
  }
};

route7Map = function(t) {
  var s;
  if ((0 <= t && t <= 24)) {
    s = scheduledToAverage(t, 7);
    return mapAndOffset(s, 'richmond', -0.5);
  }
  if ((24 < t && t < 28)) {
    return;
  }
  if ((28 <= t && t <= 69)) {
    s = scheduledToAverage(69, 7) - scheduledToAverage(t, 7);
    return mapAndOffset(s, 'sf', 1.5);
  }
};

route7TangentMap = function(t) {
  var s;
  if ((0 <= t && t <= 24)) {
    s = scheduledToAverage(t, 7);
    return maps.richmond.tangent(s);
  }
  if ((24 < t && t < 28)) {
    return;
  }
  if ((28 <= t && t <= 69)) {
    s = scheduledToAverage(69, 7) - scheduledToAverage(t, 7);
    return scale(-1, maps.sf.tangent(s));
  }
};

route11Map = function(t) {};

route11TangentMap = function(t) {};

route12Map = function(t) {};

route12TangentMap = function(t) {};

scheduledToAverage = function(t, routeNum) {
  var event, i, linearScale, nextEvent, _i, _len, _ref, _ref1;
  _ref = schedules[routeNum];
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    event = _ref[i];
    if ((event.time <= t && t <= ((_ref1 = (nextEvent = schedules[routeNum][i + 1])) != null ? _ref1.time : void 0))) {
      linearScale = d3.scale.linear().domain([event.time, nextEvent.time]).range([averageSchedules[routeNum][i].time, averageSchedules[routeNum][i + 1].time]);
      return linearScale(t);
    }
  }
};

mapAndOffset = function(t, mapName, offset) {
  return add(maps[mapName].position(t), scale(offset, rotate90(maps[mapName].tangent(t))));
};

rotate90 = function(_arg) {
  var x, y;
  x = _arg.x, y = _arg.y;
  return {
    x: y,
    y: -x
  };
};

add = function(u, v) {
  return {
    x: u.x + v.x,
    y: u.y + v.y
  };
};

scale = function(c, _arg) {
  var x, y;
  x = _arg.x, y = _arg.y;
  return {
    x: c * x,
    y: c * y
  };
};

subtract = function(u, v) {
  return add(u, scale(-1, v));
};

_(maps).extend({
  '1': {
    position: route1Map,
    tangent: route1TangentMap
  },
  '2': {
    position: route2Map,
    tangent: route2TangentMap
  },
  '3': {
    position: route3Map,
    tangent: route3TangentMap
  },
  '4': {
    position: route4Map,
    tangent: route4TangentMap
  },
  '5': {
    position: route5Map,
    tangent: route5TangentMap
  },
  '6': {
    position: route6Map,
    tangent: route6TangentMap
  },
  '7': {
    position: route7Map,
    tangent: route7TangentMap
  },
  '8': {
    position: route8Map,
    tangent: route8TangentMap
  },
  '11': {
    position: route11Map,
    tangent: route11TangentMap
  },
  '12': {
    position: route12Map,
    tangent: route12TangentMap
  }
});

//# sourceMappingURL=maps.map
