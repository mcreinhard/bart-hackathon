// Generated by CoffeeScript 1.7.1
var getETD, getRoute, populateTrains, sched, trains;

sched = null;

$.get('http://api.bart.gov/api/sched.aspx', {
  cmd: 'routesched',
  route: 8,
  key: 'UDLR-ZTYV-ENAU-LPAW'
}, function(data) {
  return sched = data;
});

getETD = function(station, callback) {
  return $.get('http://api.bart.gov/api/etd.aspx', {
    cmd: 'etd',
    orig: station,
    key: 'UDLR-ZTYV-ENAU-LPAW'
  }, function(data) {
    var results;
    results = [];
    $(data).find('estimate').each(function() {
      var $this, color, destination;
      $this = $(this);
      color = $this.find('color').text();
      destination = $this.prevAll('abbreviation').text();
      return results.push({
        minutes: parseInt($this.find('minutes').text()),
        direction: $this.find('direction').text(),
        length: parseInt($this.find('length').text()),
        color: color,
        destination: destination,
        route: getRoute(color, destination)
      });
    });
    return callback(results);
  });
};

getRoute = function(color, destination) {
  switch (color) {
    case 'YELLOW':
      if (destination === 'PITT') {
        return 2;
      } else {
        return 1;
      }
    case 'ORANGE':
      if (destination === 'RICH') {
        return 3;
      } else {
        return 4;
      }
    case 'GREEN':
      if (destination === 'FRMT') {
        return 6;
      } else {
        return 5;
      }
    case 'RED':
      if (destination === 'RICH') {
        return 8;
      } else {
        return 7;
      }
    case 'BLUE':
      if (destination === 'DUBL') {
        return 12;
      } else {
        return 11;
      }
  }
};

trains = [];

populateTrains = function() {
  return _([1, 2, 3, 4, 5, 6, 7, 8, 11, 12]).map(function(routeNum) {
    return _(schedules[routeNum].slice(1)).map(function(event, i) {
      var prevEvent;
      prevEvent = schedules[routeNum][i];
      return getETD(event.station, function(results) {
        var train, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          train = results[_i];
          if (train.route === routeNum) {
            if (train.minutes <= event.time - prevEvent.time) {
              _results.push(trains.push({
                route: routeNum,
                position: event.time - train.minutes,
                length: train.length
              }));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      });
    });
  });
};

//# sourceMappingURL=fetcher.map
